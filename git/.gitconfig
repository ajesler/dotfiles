[core]
  editor = nvim
	excludesfile = /Users/ajesler/.gitignore_global
  pager = delta # Added when switching to delta
  # pager = diff-so-fancy | less --tabs=4 -RFX

[interactive]
  diffFilter = delta --color-only # Added when switching to delta

[delta] # Added when switching to delta
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)

# [pager]
#   diff = diff-so-fancy | less
#   log = diff-highlight | less
#   show = diff-highlight | less
#
# [interactive]
#   difffilter = diff-highlight | less

# To clean up branches:
# git remote prune origin
# git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -d

[color]
  branch = auto
  diff = auto
  status = auto
	ui = true

[pretty]
  olpc = "%C(magenta)%h %C(yellow)[%ad]%Cred%d %Creset%s%C(cyan) [%aN]%Creset"
  olpcnc = "%h [%ad]%d %s [%aN]"
  fulldescription = "%C(magenta)%h %C(yellow)[%ad]%Creset %C(cyan)%s%Creset\n%b\n"

[alias]
  # == misc
  # list aliases
  la = "!git config -l | grep alias | cut -c 7-"
  mb = merge-base HEAD origin/master
  # https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
  # open-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge --format=oneline | sed -r \"s/.*Merge pull request #([0-9]+).*/\1/\"'"

  # == add
  # https://spin.atomicobject.com/2018/04/05/fuzzy-find-git-add/
  af = !git ls-files -m -o --exclude-standard | uniq | fzf --print0 -m --tac | xargs -0 -t -o git add

  # == changes
  # Use like `git hide config.yml` to ignore local changes to config.yml
  hide = update-index --assume-unchanged
  # Use like `git unhide config.yml` to again see local changes to config.yml
  unhide = update-index --no-assume-unchanged
  # Print out the hidden files
  hidden = !git ls-files -v | grep \"^[a-z]\"

  # commiting
  c = commit
  cv = commit -v
  ca = commit --amend
  uncommit = reset --soft HEAD~1
  fixup = "!f() { git log --format=olpc --decorate --date=relative --max-count 200 | fzf --ansi --preview 'git show --color=always {1}' | cut -d' ' -f 1 | xargs -r git commit --edit --fixup; }; f"

  # == restore
  # Unstage whole files using a fuzzy file finder
  us = !git diff --name-only --cached --diff-filter=AM | uniq | fzf --print0 -m --tac | xargs -0 -t -o git restore --staged
  # Unstage patches of files using a fuzzy file finder
  usp = !git diff --name-only --cached --diff-filter=AM | uniq | fzf --print0 -m --tac | xargs -0 -t -o git restore --staged --patch

  # == rebasing
  # Show the list of files that are conflicting
  con = diff --name-only --diff-filter=U --relative
  # Edit conflicted files
  ec = "!f() { git con | xargs ${EDITOR}; }; f"
  # Rebase and auto-squash fixup commits
  ras =  "!f() { git rebase -i --autosquash $(git mb); }; f"
  # Rebase onto master and auto-squash fixup commits
  rasm =  "!f() { git fetch && git rebase -i --autosquash origin/master; }; f"
  # Continue
  rc = rebase --continue

  # == log
  lb = log --format=fulldescription --decorate --date=relative --name-only --reverse origin/master..
  lbd = log --format=fulldescription --decorate --date=relative --reverse --patch origin/master..
  lm = log --format=fulldescription --decorate --date=relative --name-only
  ls = log --format=olpc --decorate --date=relative
  ld = log --format=olpc --decorate --date=relative --stat -p
  lm = log --format=fulldescription --decorate --date=relative --name-only
  lom = log --merges --format=fulldescription --decorate --date=relative --stat -p
  lf = log --format=olpc --decorate --date=relative --stat
  lfn = log --format=olpc --decorate --date=relative --name-only
  today = log --since=00:00:00 --all --no-merges --oneline --author=
  fh = log -p -M --follow
  fhs = log --oneline -M --stat --follow
  # commitlog = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git log --format=\"[${BRANCH} %h] %s\" --date=short --reverse $1; }; f"

  # == diff
  ds = diff --staged
  # Diff the current branch against master
  rdb = "!f() { git range-diff origin/master $(git rev-parse --abbrev-ref --symbolic-full-name @{u}) HEAD; }; f"
  # Diff a file against master
  dam = "!f() { CMD=\"git diff origin/${2:-master}:${1} ${1}\"; echo \"${CMD}\"; sh -c \"$CMD\"; }; f"

  # == branch
  branchname = rev-parse --abbrev-ref HEAD
  track = "!f() { BRANCH=$(git branchname); git branch --set-upstream-to=origin/${BRANCH}; }; f"
  cpbn = "!f() { git branchname | pbcopy; }; f"
  push-up = "!f() { BRANCH=$(git branchname); CMD=\"git push --set-upstream origin ${BRANCH} ${1}\"; echo \"${CMD}\"; eval $CMD; }; f"
  # List the 150 most recently committed to branch names
  recent = for-each-ref --count=150 --sort=-committerdate refs/heads/ --format="%(refname:short)"

  # == switch
  sr = switch-recent

[push]
  default = simple
	autoSetupRemote = true

[pull]
  ff = only

[merge]
  stat = true
  ff = false
  log = true
  conflictstyle = diff3 # Added when switching to delta

[diff]
  mnemonicprefix = true
  renames = copies
  renameslimit = 0
	compactionHeuristic = true
  colorMoved = default # Added when switching to delta

[branch]
  autosetupmerge = true

[advice]
  pushNonFastForward = false

[include]
  path = ~/.gitconfig_local
[commit]
	verbose = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = 34 bold
	newHighlight = 34 bold 22
[color "diff"]
	meta = 227
	frag = magenta bold
	commit = 227 bold
	old = red bold
	new = 34 bold
	whitespace = red reverse
[http]
	postBuffer = 10485760
